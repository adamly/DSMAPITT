//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.12 at 04:15:02 PM CEST 
//


package org.tmf.dsmapi.troubleTicket.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Status.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="Status">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Submitted"/>
 *     &lt;enumeration value="Rejected"/>
 *     &lt;enumeration value="Acknowledged"/>
 *     &lt;enumeration value="InProgress"/>
 *     &lt;enumeration value="InProgressHeld"/>
 *     &lt;enumeration value="InProgressPending"/>
 *     &lt;enumeration value="Resolved"/>
 *     &lt;enumeration value="Closed"/>
 *     &lt;enumeration value="Cancelled"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "Status")
@XmlEnum
public enum Status {

    @XmlEnumValue("Submitted")
    Submitted("Submitted"),
    @XmlEnumValue("Rejected")
    Rejected("Rejected"),
    @XmlEnumValue("Acknowledged")
    Acknowledged("Acknowledged"),
    @XmlEnumValue("InProgress")
    InProgress("InProgress"),
    @XmlEnumValue("InProgressHeld")
    InProgressHeld("InProgressHeld"),
    @XmlEnumValue("InProgressPending")
    InProgressPending("InProgressPending"),
    @XmlEnumValue("Resolved")
    Resolved("Resolved"),
    @XmlEnumValue("Closed")
    Closed("Closed"),
    @XmlEnumValue("Cancelled")
    Cancelled("Cancelled");
    private final String value;

    Status(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

     public static Status fromString(String text) {
        if (text != null) {
            for (Status b : Status.values()) {
                if (text.equalsIgnoreCase(b.toString())) {
                    return b;
                }
            }
        }
        return null;
    }

}
